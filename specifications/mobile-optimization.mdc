# Mobile Optimization Guidelines for Canvas

## Purpose
This document provides guidelines for optimizing HTML5 Canvas applications for mobile devices to ensure good performance and user experience.

---

## Canvas Performance on Mobile

### ✅ **What Works Well:**
- **Native support** - Canvas is fully supported on all modern mobile browsers
- **Hardware acceleration** - Mobile GPUs can handle canvas operations
- **Touch events** - Click handlers work automatically with touch
- **Responsive scaling** - Canvas can scale to fit different screen sizes

### ⚠️ **Common Issues:**
- **Large canvas dimensions** - High pixel counts impact performance significantly
- **Battery drain** - Continuous animations consume battery quickly
- **Memory constraints** - Mobile devices have limited RAM
- **CPU/GPU limitations** - Weaker processors than desktop
- **Touch targets** - Fingers are less precise than mouse cursors (44x44px minimum)

---

## 1. Canvas Sizing Best Practices

### Dynamic Canvas Sizing
**MUST** adjust canvas size based on device capabilities:

```javascript
const setupCanvas = (canvas) => {
  const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);
  const maxWidth = isMobile ? 800 : 1400;
  const maxHeight = isMobile ? 600 : 1000;
  
  // Get container size
  const container = canvas.parentElement;
  const containerWidth = container.clientWidth;
  
  // Calculate appropriate size
  const scale = Math.min(containerWidth / maxWidth, 1);
  canvas.width = maxWidth * scale;
  canvas.height = maxHeight * scale;
};
```

### Device Pixel Ratio Considerations
**SHOULD** account for high-DPI displays (Retina, etc.):

```javascript
const setupCanvasForHiDPI = (canvas) => {
  const dpr = window.devicePixelRatio || 1;
  const rect = canvas.getBoundingClientRect();
  
  // Set actual size in memory (scaled to account for DPR)
  canvas.width = rect.width * dpr;
  canvas.height = rect.height * dpr;
  
  // Scale context to match DPR
  const ctx = canvas.getContext('2d');
  ctx.scale(dpr, dpr);
  
  // Set display size (CSS)
  canvas.style.width = `${rect.width}px`;
  canvas.style.height = `${rect.height}px`;
};
```

### Recommended Maximum Dimensions

| Device Type | Max Width | Max Height | Max Pixels |
|-------------|-----------|------------|------------|
| Mobile Phone | 800px | 600px | 480,000 |
| Tablet | 1200px | 900px | 1,080,000 |
| Desktop | 1920px | 1080px | 2,073,600 |

---

## 2. Performance Optimization

### Reduce Animation Complexity
**MUST** simplify animations on mobile:

```javascript
const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);
const maxParticles = isMobile ? 20 : 50;
const animationInterval = isMobile ? 20 : 10; // Lower framerate on mobile
```

### Frame Rate Throttling
**SHOULD** implement frame rate limiting for mobile:

```javascript
let lastFrameTime = 0;
const targetFrameRate = isMobile ? 30 : 60;
const frameInterval = 1000 / targetFrameRate;

const gameLoop = (timestamp) => {
  if (timestamp - lastFrameTime < frameInterval) {
    requestAnimationFrame(gameLoop);
    return;
  }
  
  lastFrameTime = timestamp;
  // Draw frame
  requestAnimationFrame(gameLoop);
};
```

### Minimize Gradient Usage
**SHOULD** use simpler graphics on mobile:

```javascript
const drawBalloon = (balloon, isMobile) => {
  if (isMobile) {
    // Simple solid color
    ctx.fillStyle = balloon.color;
    ctx.fill();
  } else {
    // Complex gradient
    const gradient = ctx.createRadialGradient(/*...*/);
    ctx.fillStyle = gradient;
    ctx.fill();
  }
};
```

---

## 3. Touch Interaction Optimization

### Increase Touch Targets
**MUST** make interactive elements larger on mobile:

```javascript
const getMinimumRadius = () => {
  const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);
  return isMobile ? 44 : 30; // 44px minimum for touch
};
```

### Handle Touch Events Properly
**SHOULD** add specific touch event handlers:

```javascript
canvas.addEventListener('touchstart', (e) => {
  e.preventDefault(); // Prevent scrolling
  const touch = e.touches[0];
  handleInteraction(touch.clientX, touch.clientY);
}, { passive: false });
```

### Prevent Unwanted Touch Behaviors
**MUST** disable browser touch gestures on canvas:

```css
canvas {
  touch-action: none; /* Disable browser touch gestures */
  -webkit-user-select: none; /* Disable text selection */
  user-select: none;
}
```

---

## 4. Memory Management

### Limit Object Count
**MUST** cap the number of active objects:

```javascript
const MAX_OBJECTS = isMobile ? 15 : 50;

if (objects.length >= MAX_OBJECTS) {
  // Don't create new objects
  return;
}
```

### Clean Up Resources
**MUST** remove off-screen objects immediately:

```javascript
// Remove objects that are no longer visible
objects = objects.filter(obj => {
  return obj.y > -obj.radius && obj.y < canvas.height + obj.radius;
});
```

### Avoid Memory Leaks
**MUST** clear intervals and remove event listeners:

```javascript
const cleanup = () => {
  if (animationId) {
    cancelAnimationFrame(animationId);
  }
  canvas.removeEventListener('click', handleClick);
  canvas.removeEventListener('touchstart', handleTouch);
};
```

---

## 5. Battery Conservation

### Pause When Not Visible
**SHOULD** pause animations when tab/app is not active:

```javascript
document.addEventListener('visibilitychange', () => {
  if (document.hidden) {
    pauseGame();
  } else {
    resumeGame();
  }
});
```

### Offer Quality Settings
**SHOULD** provide performance modes:

```javascript
const performanceModes = {
  high: { maxObjects: 50, fps: 60, gradients: true },
  medium: { maxObjects: 30, fps: 45, gradients: true },
  low: { maxObjects: 15, fps: 30, gradients: false },
  auto: () => isMobile ? performanceModes.low : performanceModes.high
};
```

---

## 6. Testing Checklist

### Device Testing
- [ ] Test on iPhone (Safari)
- [ ] Test on Android (Chrome)
- [ ] Test on iPad/tablet
- [ ] Test with DevTools device emulation
- [ ] Test on actual low-end devices

### Performance Testing
- [ ] Check FPS with DevTools Performance tab
- [ ] Monitor memory usage
- [ ] Test battery drain over 10 minutes
- [ ] Verify smooth scrolling on page
- [ ] Check responsiveness of touch interactions

### Functionality Testing
- [ ] Touch events work correctly
- [ ] Pinch-zoom is disabled (if needed)
- [ ] Orientation changes handled gracefully
- [ ] Canvas scales properly on different screen sizes
- [ ] Game pauses when switching apps

---

## 7. Common Patterns

### Responsive Canvas Setup
```javascript
const initCanvas = (canvasId) => {
  const canvas = document.getElementById(canvasId);
  const ctx = canvas.getContext('2d');
  const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);
  
  // Set responsive dimensions
  const resize = () => {
    const container = canvas.parentElement;
    const maxWidth = isMobile ? 800 : 1400;
    const maxHeight = isMobile ? 600 : 1000;
    const scale = Math.min(container.clientWidth / maxWidth, 1);
    
    canvas.width = maxWidth * scale;
    canvas.height = maxHeight * scale;
  };
  
  resize();
  window.addEventListener('resize', resize);
  
  return { canvas, ctx, isMobile };
};
```

### Mobile-Optimized Game Loop
```javascript
class Game {
  constructor() {
    this.isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);
    this.maxObjects = this.isMobile ? 15 : 50;
    this.targetFPS = this.isMobile ? 30 : 60;
    this.useGradients = !this.isMobile;
  }
  
  update() {
    // Limit object count
    if (this.objects.length >= this.maxObjects) {
      this.objects.shift(); // Remove oldest
    }
    
    // Update logic
    this.objects.forEach(obj => obj.update());
  }
  
  draw() {
    this.objects.forEach(obj => {
      obj.draw(this.ctx, this.useGradients);
    });
  }
}
```

---

## 8. Resources

### Detection Libraries
- **Mobile Detect**: https://github.com/hgoebl/mobile-detect.js
- **Device.js**: https://github.com/matthewhudson/device.js

### Performance Tools
- Chrome DevTools Performance Tab
- Safari Web Inspector
- Firefox Developer Tools
- Lighthouse Performance Audit

### Testing Tools
- BrowserStack for real device testing
- Chrome DevTools Device Mode
- iOS Simulator (Mac only)
- Android Emulator (Android Studio)

---

## Summary

**Key Takeaways:**
1. ✅ Use responsive canvas sizing based on device
2. ✅ Reduce complexity on mobile (fewer objects, simpler graphics)
3. ✅ Implement proper touch event handling
4. ✅ Throttle frame rate on mobile devices
5. ✅ Test on real devices, not just emulators
6. ✅ Pause animations when not visible
7. ✅ Clean up resources properly

**Last Updated:** October 28, 2025  
**Version:** 1.0.0
